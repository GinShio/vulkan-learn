* Vulkan-Learn

Learning vulkan C++ binding repo

** requirement

  + Vulkan
  + SDL2
  + GLM
  + pkgconfig
    * download pkg-config and dependencies if Windows
      - [[https://download.gnome.org/binaries/win32/dependencies/pkg-config_0.26-1_win32.zip][pkg-config_0.26-1]]
      - [[https://download.gnome.org/binaries/win32/glib/2.28/glib_2.28.8-1_win32.zip][glib_2.28.8-1]]
      - [[https://download.gnome.org/binaries/win32/dependencies/gettext-runtime_0.18.1.1-2_win32.zip][gettext-runtime_0.18.1.1-2]]
    * write ~.pc~ file
      - vulkan.pc
      - sdl2.pc
    * set environment variable =PKG_CONFIG_PATH=
  + cmake

** project structure
#+begin_example
/
├── cmake/
├── CMakeLists.txt
├── include/
├── projects/
│   ├── canvas/
│   ├── test/
│   └── triangle/
├── README.org
├── src/
├── video/
├── xmake/
└── xmake.lua
#+end_example

+ cmake :: cmake files
+ CMakeLists.txt :: cmake project configuration file
+ include :: common utility definition
+ projects ::
  | dir      | target         | comment                                  |
  |----------+----------------+------------------------------------------|
  | canvas   | VulkanCanvas   | glslang canvas (learn builtin functions) |
  | test     | VulkanTest     | test vulkan SDK                          |
  | triangle | VulkanTriangle | draw a triangle (learn VF pipeline)      |
+ src :: common utility implement, target =VulkanBase=
+ video :: project display
+ xmake :: xmake files
+ xmake.lua :: xmake project configuration file

** .pc file
.pc file is libraries configuration file, it record the library's
=compile-options=, =link-options=, and etc. pkg-config can parse .pc file, and
return the library's information.

Like this, it print the link options
#+begin_src shell
pkg-config --libs vulkan
#+end_src

#+RESULTS:
: -lvulkan

this command will print the compile options
#+begin_src shell
pkg-config --cflags sdl2
#+end_src

#+RESULTS:
: -D_REENTRANT -I/usr/include/SDL2

but Windows haven't .pc file, so we need write .pc files. e.g. =vulkan.pc=
#+begin_example
prefix=/usr
exec_prefix=/usr
libdir=/usr/lib/x86_64-linux-gnu
includedir=/usr/include

Name: Vulkan-Loader
Description: Vulkan Loader
Version: 1.3.204
Libs: -L${libdir} -lvulkan
Libs.private:  -lstdc++ -lm -lgcc_s -lgcc -lc -lgcc_s -lgcc
Cflags: -I${includedir}
#+end_example

Good. setup environment variable =PKG_CONFIG_PATH=.

** build and run
*** cmake
cmake need to special the source directory, build directory, and build tool
(default is =Unix Makefiles=), you can use the below command to generate build script
#+begin_src shell
cmake -S. -Bbuild -GNinja
#+end_src

set build release mode
#+begin_src shell
cmake -S. -Bbuild -GNinja -DCMAKE_BUILD_TYPE=Release
#+end_src

use clang toolchains not gcc
#+begin_src shell
cmake -S. -Bbuild -GNinja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
#+end_src

Okay, generated the build script, you can build your application
#+begin_src shell
cmake --build build
#+end_src

if you want to special the target, run
#+begin_src shell
cmake --build build --target TARGET_NAME
#+end_src

Nice, generated and built the application, next run it! But cmake not provide
=run= command, you must run it manually
#+begin_src shell
build/bin/VulkanTest
#+end_src

*** xmake
if you want to build the application by xmake, run below command
#+begin_src shell
xmake build
#+end_src

next, special target
#+begin_src shell
xmake build TARGET_NAME
#+end_src

set debug mode or release mode, you need
#+begin_src shell
xmake f --mode=debug
#+end_src

if you want to use clang toolchain
#+begin_src shell
xmake f --toolchain=clang
#+end_src

if you need =compile_command=, run
#+begin_src shell
xmake project -k compile_commands
#+end_src

last, run the application
#+begin_src shell
xmake run -w. TARGET_NAME
#+end_src

** C++ technical
 + [[https://www.geeksforgeeks.org/curiously-recurring-template-pattern-crtp-2/][Curiously recurring template pattern (CRTP)]]
 + [[https://en.cppreference.com/w/cpp/language/structured_binding][Structured binding declaration]]
 + [[https://en.cppreference.com/w/cpp/language/class_template_argument_deduction][Class template argument deduction (CTAD)]]
 + [[https://en.cppreference.com/w/cpp/language/raii][Resource Acquisition Is Initialization (RAII)]]
 + [[https://en.cppreference.com/w/cpp/language/auto][Placeholder type specifiers]]

** LICENSE
[[LICENSE][3-clause BSD License]] © Xin 'Russell' Liu
